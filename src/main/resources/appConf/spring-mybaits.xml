<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans     
                       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd     
                       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
                       http://www.springframework.org/schema/context     
                       http://www.springframework.org/schema/context/spring-context-4.2.xsd
                       http://www.springframework.org/schema/aop
	                   http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
                       ">


	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_user}" />
		<property name="password" value="${jdbc_password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="10" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<!-- mysql用 -->
		<!-- <property name="validationQuery" value="SELECT 'x' " /> -->
		<!-- oracle用 -->
		<!-- <property name="validationQuery" value="select * from dual" /> -->
		
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<bean id="sqlSessionFactory" class="org.workSpace.core.frame.appSqlSessionFactoryBean">
		<property name="configLocation" value="classpath:appConf/mybatis-config.xml"></property>
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.hc.systemSetApps.**.entity" />
		<property name="mapperLocations">
			<list>
				<value>classpath:mapper/*.xml</value>
			</list>
		</property>

		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							<!-- dialect=mysql -->
							dialect=oracle
							offsetAsPageNum=true
							rowBoundsWithCount=true
							reasonable=true
							params=count=countSql
						</value>
					</property>
				</bean>
			</array>
		</property>

	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 声明式事物 传播 PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 目前使用此种事务传播方式
		PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 PROPAGATION_MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。
		PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。 PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
		PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。 PROPAGATION_NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务（还不是太明白），如果当前没有事务，就新建一个事务。
		隔离级别 1 ISOLATION_DEFAULT 默认的隔离级别 下面几个都是 JDBC isolation levels 一一对应： 2 ISOLATION_READ_UNCOMMITTED
		Connection.TRANSACTION_READ_UNCOMMITTED 指示防止发生脏读的常量；不可重复读和虚读有可能发生。 3 ISOLATION_READ_COMMITTED
		Connection.TRANSACTION_READ_COMMITTED 指示可以发生脏读 (dirty read)、不可重复读和虚读 (phantom
		read) 的常量。 4 ISOLATION_REPEATABLE_READ Connection.TRANSACTION_REPEATABLE_READ
		指示防止发生脏读和不可重复读的常量；虚读有可能发生。 5 ISOLATION_SERIALIZABLE Connection.TRANSACTION_SERIALIZABLE
		指示防止发生脏读、不可重复读和虚读的常量。 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="binding*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="count*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="list*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="txPointcut"
			expression="execution(* com.hc..*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>





</beans>   
